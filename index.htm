<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
    <title>TX Converter</title>
</head>
<body><header>
  <h1 id="gema-h1">X E N O T A T I O N</h1>
</header>
<style>
@import url('https://fonts.googleapis.com/css?family=Libre+Barcode+39+Text|Roboto|Bungee+Hairline');
body {
  text-align: center;
  font-family: 'Roboto', sans-serif;
  margin: 0;
  background: #000;
}
body, p, li, div, i {
  color: #ace;
}
header {
  margin-top: 0;
}
h1, h2, h3, h4, h5, h6 {
  line-height: 2em;
  font-family: "Bungee Hairline";
  color: #def;
}
h1 {
  font-size: 80px;
  margin: auto;
}
.btn {
  text-decoration: none;
  border-radius: 3px;
  background: #222;
  color: #eee;
  padding: 10px 20px;
}
.btn-sm {
  padding: 5px 10px;
}
input {
  color: inherit;
  outline: none;
  background: transparent;
  border: none;
  font-family: inherit;
  font-size: inherit;
}
#inputs {
  margin-bottom: 2em;
}
#outputs {
  display: flex;
  justify-content: center;
}
#results {
  white-space: pre;
  text-align: left;
  width: 15em;
}
#number {
  margin: 0 5em;
}
  
#seed {
  border: 0;
  width: 30em;
  height: 2em;
  padding: 10px;
}
a {
  color: #def;
}
::selection {
  color: #0FF;
}
hr {
  margin: 3em 0;
  border: 1px solid #abc;
}
</style>
<div id="number"></div>
<div id="inputs">
  <input id="seed" placeholder="enter a number in decimal, tic xenotation, or nullary xenotation" autofocus="">
</div>
<div id="outputs">
  <div id="results"></div>
</div>
<script src="jquery-3.3.1.min.js"></script>
<script>
const isPrime = n => {
  if (isNaN(n) || !isFinite(n) || n%1 || n<2) return false;
  if (n == leastFactor(n)) return true;
  return false;
}
// returns the smallest prime that divides n
// mostly copypasted
// all of the conditionals cut down on CPU cycles.
const leastFactor = n => {
  if (isNaN(n) || !isFinite(n)) return NaN;
  if (n==0) return 0;
  if (n%1 || n*n<2) return 1;
  if (n%2==0) return 2;
  if (n%3==0) return 3;
  if (n%5==0) return 5;
  const m = Math.sqrt(n);
  for (let i=7;i<=m;i+=30) {
    if (n%i==0)      return i;
    if (n%(i+4)==0)  return i+4;
    if (n%(i+6)==0)  return i+6;
    if (n%(i+10)==0) return i+10;
    if (n%(i+12)==0) return i+12;
    if (n%(i+16)==0) return i+16;
    if (n%(i+22)==0) return i+22;
    if (n%(i+24)==0) return i+24;
  }
  return n;
}
// the following taken from https://stackoverflow.com/questions/17389350/prime-numbers-javascript
const nextPrime = value => {
  if (value > 2) {
    let i, q;
    do {
      i = 3;
      value += 2;
      q = Math.floor(Math.sqrt(value));
      while (i <= q && value%i) {
        i += 2;
      }
    } while (i <= q);
    return value;
  }
  return value === 2 ? 3 : 2;
}
// sieve of eratosthenes
let primes = [];
const era = n => {
  if (primes[primes.length - 1] >= n) return primes;
  const a = new Array(n + 1).fill(0); // new Array(n) wouldn't include n.
  for (let i=2; i<a.length; i++) {
    for (let j=i*2; j<a.length; j+=i) {
      a[j] = 1;
    }
  }
  primes = a.map((e, i) => !e ? i : 0).filter(e => e).slice(1);
  return primes;
}
primes = era(5);
const indexOfPrime = n => {
  if (n < 2) return -1;
  if (primes.includes(n)) return primes.indexOf(n) + 1;
  return era(n).indexOf(n) + 1;
}
const plex = n => {
  if (!+n) return 1; // REMEMBER: +n is bitwise Number(n)
  let i = primes.length+1000;
  while (primes.length < n+1) {
    era(i);
    i += 1000;
  }
  return primes[n - 1];
}
// the following based on http://www.javascripter.net/math/primes/factorization.htm
const factor = n => {
  const factors = [];
  if (!n || isNaN(n) || !isFinite(n) || n%1 != 0) {
    return factors;
  }
  if (n < 0) {
    return [-1, ...factor(-n)];
  }
  const minFactor = leastFactor(n);
  if (n == minFactor) {
    factors.push(n);
    return factors;
  }
  return [minFactor, ...factor(n/minFactor)];
}
const shuffle = a => {
  a.sort((b, c) => Math.round(Math.random()) ? 1 : -1);
  return a;
}
const xenote = n => {
  if (+n == n) {
    return a2x(+n).map(stringify).join('');
  }
  return x2a(n);
}
const stringify = a => {
  if (Array.isArray(a)) {
    return '(' + a.reduce((a, b) => a + stringify(b), '') + ')';
  }
  return a;
}
// 3 -> (:)
const a2x = n => {
  if (n < 2) return [''];
  const factors = factor(n);
  // we shuffle just because we can. And, after all, T.X. is commutative.
  return shuffle(factors).map(f => f == 2 ? ':' : a2x(indexOfPrime(f)));
};
// (:) -> 3
const x2a = s => {
  if (!s) return 1;
  let parens = 0,
      splits = [];
  for (let i=0; i<s.length; i++) {
    if (parens == 0 && i) splits.push(i);
    if (parens < 0) return 'Invalid xenotation.';
    if (s[i] == '(') parens++;
    if (s[i] == ')') parens--;
  }
  splits.push(s.length);
  if (splits.length == 1) return plex(x2a(s.slice(1, s.length - 1)));
  const substrs = [];
  let last = 0;
  for (let idx of splits) {
    substrs.push(s.slice(last, idx));
    last = idx;
  }
  const sub2a = sub => {
    if (sub == ':') return 2;
    return x2a(sub);
  }
  const viv = substrs.map(sub2a);
  return viv.reduce((a, b) => a * b, 1);
}
// Reading inputs and affecting the webpage 
const IGNORE_KEYCODES = [32,91,16,18];
$("#seed").keyup(e => {setTimeout(() => {
  let seed = $("#seed"),
      entry = seed.val().replace(/[^0-9(:)+]/g, ''), 
      result;
  seed.val(entry);
  if (!entry || !entry.match(/^[0-9+]|[(:)]$/) || IGNORE_KEYCODES.includes(e.which)) return;
  else if (entry >= 4294967296) result = 'Number too large to be processed by Javascript.'
  else if (entry == 1) result = "1 isn't real.";
  else result = xenote(entry);
  $("#number").html(`<h1>${result}</h1>`)
}, 0)})
</script></body></html>